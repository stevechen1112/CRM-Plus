version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: crm-postgres
    environment:
      POSTGRES_DB: crm_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crm_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crm-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@crm.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - crm-network
    depends_on:
      - postgres

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: crm-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - crm-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
      target: development
    container_name: crm-backend
    command: sh -c "npm install -g tsx && npm run start:local"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/crm_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
      FRONTEND_URL: http://localhost:3000
      PORT: 8080
      ENABLE_SWAGGER: "false"
      ALLOW_INSECURE_LOGIN: "false"
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "8080:8080"
    networks:
      - crm-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/api/v1/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    profiles: ["local"]

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      target: development
    container_name: crm-frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080/api/v1
      VITE_APP_TITLE: CRM System
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - crm-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles: ["local"]

networks:
  crm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: